import { parse, parseSigned, serialize, serializeSigned } from '../../utils/cookie.ts';
export const getCookie = (c, key)=>{
    const cookie = c.req.raw.headers.get('Cookie');
    if (typeof key === 'string') {
        if (!cookie) return undefined;
        const obj = parse(cookie, key);
        return obj[key];
    }
    if (!cookie) return {};
    const obj = parse(cookie);
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return obj;
};
export const getSignedCookie = async (c, secret, key)=>{
    const cookie = c.req.raw.headers.get('Cookie');
    if (typeof key === 'string') {
        if (!cookie) return undefined;
        const obj = await parseSigned(cookie, secret, key);
        return obj[key];
    }
    if (!cookie) return {};
    const obj = await parseSigned(cookie, secret);
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return obj;
};
export const setCookie = (c, name, value, opt)=>{
    const cookie = serialize(name, value, opt);
    c.header('set-cookie', cookie, {
        append: true
    });
};
export const setSignedCookie = async (c, name, value, secret, opt)=>{
    const cookie = await serializeSigned(name, value, secret, opt);
    c.header('set-cookie', cookie, {
        append: true
    });
};
export const deleteCookie = (c, name, opt)=>{
    setCookie(c, name, '', {
        ...opt,
        maxAge: 0
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvaG9ub0B2My4xMC4wLXJjLjIvaGVscGVyL2Nvb2tpZS9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IENvbnRleHQgfSBmcm9tICcuLi8uLi9jb250ZXh0LnRzJ1xuaW1wb3J0IHsgcGFyc2UsIHBhcnNlU2lnbmVkLCBzZXJpYWxpemUsIHNlcmlhbGl6ZVNpZ25lZCB9IGZyb20gJy4uLy4uL3V0aWxzL2Nvb2tpZS50cydcbmltcG9ydCB0eXBlIHsgQ29va2llT3B0aW9ucywgQ29va2llLCBTaWduZWRDb29raWUgfSBmcm9tICcuLi8uLi91dGlscy9jb29raWUudHMnXG5cbmludGVyZmFjZSBHZXRDb29raWUge1xuICAoYzogQ29udGV4dCwga2V5OiBzdHJpbmcpOiBzdHJpbmcgfCB1bmRlZmluZWRcbiAgKGM6IENvbnRleHQpOiBDb29raWVcbn1cblxuaW50ZXJmYWNlIEdldFNpZ25lZENvb2tpZSB7XG4gIChjOiBDb250ZXh0LCBzZWNyZXQ6IHN0cmluZyB8IEJ1ZmZlclNvdXJjZSwga2V5OiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZyB8IHVuZGVmaW5lZCB8IGZhbHNlPlxuICAoYzogQ29udGV4dCwgc2VjcmV0OiBzdHJpbmcpOiBQcm9taXNlPFNpZ25lZENvb2tpZT5cbn1cblxuZXhwb3J0IGNvbnN0IGdldENvb2tpZTogR2V0Q29va2llID0gKGMsIGtleT8pID0+IHtcbiAgY29uc3QgY29va2llID0gYy5yZXEucmF3LmhlYWRlcnMuZ2V0KCdDb29raWUnKVxuICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoIWNvb2tpZSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIGNvbnN0IG9iaiA9IHBhcnNlKGNvb2tpZSwga2V5KVxuICAgIHJldHVybiBvYmpba2V5XVxuICB9XG4gIGlmICghY29va2llKSByZXR1cm4ge31cbiAgY29uc3Qgb2JqID0gcGFyc2UoY29va2llKVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICByZXR1cm4gb2JqIGFzIGFueVxufVxuXG5leHBvcnQgY29uc3QgZ2V0U2lnbmVkQ29va2llOiBHZXRTaWduZWRDb29raWUgPSBhc3luYyAoYywgc2VjcmV0LCBrZXk/KSA9PiB7XG4gIGNvbnN0IGNvb2tpZSA9IGMucmVxLnJhdy5oZWFkZXJzLmdldCgnQ29va2llJylcbiAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKCFjb29raWUpIHJldHVybiB1bmRlZmluZWRcbiAgICBjb25zdCBvYmogPSBhd2FpdCBwYXJzZVNpZ25lZChjb29raWUsIHNlY3JldCwga2V5KVxuICAgIHJldHVybiBvYmpba2V5XVxuICB9XG4gIGlmICghY29va2llKSByZXR1cm4ge31cbiAgY29uc3Qgb2JqID0gYXdhaXQgcGFyc2VTaWduZWQoY29va2llLCBzZWNyZXQpXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIHJldHVybiBvYmogYXMgYW55XG59XG5cbmV4cG9ydCBjb25zdCBzZXRDb29raWUgPSAoYzogQ29udGV4dCwgbmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBvcHQ/OiBDb29raWVPcHRpb25zKTogdm9pZCA9PiB7XG4gIGNvbnN0IGNvb2tpZSA9IHNlcmlhbGl6ZShuYW1lLCB2YWx1ZSwgb3B0KVxuICBjLmhlYWRlcignc2V0LWNvb2tpZScsIGNvb2tpZSwgeyBhcHBlbmQ6IHRydWUgfSlcbn1cblxuZXhwb3J0IGNvbnN0IHNldFNpZ25lZENvb2tpZSA9IGFzeW5jIChcbiAgYzogQ29udGV4dCxcbiAgbmFtZTogc3RyaW5nLFxuICB2YWx1ZTogc3RyaW5nLFxuICBzZWNyZXQ6IHN0cmluZyB8IEJ1ZmZlclNvdXJjZSxcbiAgb3B0PzogQ29va2llT3B0aW9uc1xuKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGNvbnN0IGNvb2tpZSA9IGF3YWl0IHNlcmlhbGl6ZVNpZ25lZChuYW1lLCB2YWx1ZSwgc2VjcmV0LCBvcHQpXG4gIGMuaGVhZGVyKCdzZXQtY29va2llJywgY29va2llLCB7IGFwcGVuZDogdHJ1ZSB9KVxufVxuXG5leHBvcnQgY29uc3QgZGVsZXRlQ29va2llID0gKGM6IENvbnRleHQsIG5hbWU6IHN0cmluZywgb3B0PzogQ29va2llT3B0aW9ucyk6IHZvaWQgPT4ge1xuICBzZXRDb29raWUoYywgbmFtZSwgJycsIHsgLi4ub3B0LCBtYXhBZ2U6IDAgfSlcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxTQUFTLEtBQUssRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLGVBQWUsUUFBUSx3QkFBdUI7QUFhdEYsT0FBTyxNQUFNLFlBQXVCLENBQUMsR0FBRyxNQUFTO0lBQy9DLE1BQU0sU0FBUyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztJQUNyQyxJQUFJLE9BQU8sUUFBUSxVQUFVO1FBQzNCLElBQUksQ0FBQyxRQUFRLE9BQU87UUFDcEIsTUFBTSxNQUFNLE1BQU0sUUFBUTtRQUMxQixPQUFPLEdBQUcsQ0FBQyxJQUFJO0lBQ2pCLENBQUM7SUFDRCxJQUFJLENBQUMsUUFBUSxPQUFPLENBQUM7SUFDckIsTUFBTSxNQUFNLE1BQU07SUFDbEIsOERBQThEO0lBQzlELE9BQU87QUFDVCxFQUFDO0FBRUQsT0FBTyxNQUFNLGtCQUFtQyxPQUFPLEdBQUcsUUFBUSxNQUFTO0lBQ3pFLE1BQU0sU0FBUyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztJQUNyQyxJQUFJLE9BQU8sUUFBUSxVQUFVO1FBQzNCLElBQUksQ0FBQyxRQUFRLE9BQU87UUFDcEIsTUFBTSxNQUFNLE1BQU0sWUFBWSxRQUFRLFFBQVE7UUFDOUMsT0FBTyxHQUFHLENBQUMsSUFBSTtJQUNqQixDQUFDO0lBQ0QsSUFBSSxDQUFDLFFBQVEsT0FBTyxDQUFDO0lBQ3JCLE1BQU0sTUFBTSxNQUFNLFlBQVksUUFBUTtJQUN0Qyw4REFBOEQ7SUFDOUQsT0FBTztBQUNULEVBQUM7QUFFRCxPQUFPLE1BQU0sWUFBWSxDQUFDLEdBQVksTUFBYyxPQUFlLE1BQThCO0lBQy9GLE1BQU0sU0FBUyxVQUFVLE1BQU0sT0FBTztJQUN0QyxFQUFFLE1BQU0sQ0FBQyxjQUFjLFFBQVE7UUFBRSxRQUFRLElBQUk7SUFBQztBQUNoRCxFQUFDO0FBRUQsT0FBTyxNQUFNLGtCQUFrQixPQUM3QixHQUNBLE1BQ0EsT0FDQSxRQUNBLE1BQ2tCO0lBQ2xCLE1BQU0sU0FBUyxNQUFNLGdCQUFnQixNQUFNLE9BQU8sUUFBUTtJQUMxRCxFQUFFLE1BQU0sQ0FBQyxjQUFjLFFBQVE7UUFBRSxRQUFRLElBQUk7SUFBQztBQUNoRCxFQUFDO0FBRUQsT0FBTyxNQUFNLGVBQWUsQ0FBQyxHQUFZLE1BQWMsTUFBOEI7SUFDbkYsVUFBVSxHQUFHLE1BQU0sSUFBSTtRQUFFLEdBQUcsR0FBRztRQUFFLFFBQVE7SUFBRTtBQUM3QyxFQUFDIn0=